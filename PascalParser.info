-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from PascalParser.y
-----------------------------------------------------------------------------


rule 12 is unused

terminal '=' is unused
terminal let is unused
terminal var is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Program                            (0)
	Program -> Linst                                   (1)
	Linst -> Inst                                      (2)
	Linst -> Linst Inst                                (3)
	Inst -> Print ';'                                  (4)
	Inst -> ';'                                        (5)
	Print -> print Expr                                (6)
	Expr -> integer                                    (7)
	Expr -> Expr '+' Expr                              (8)
	Expr -> Expr '-' Expr                              (9)
	Expr -> Expr '*' Expr                              (10)
	Expr -> Expr '/' Expr                              (11)
	Decl -> let var '=' integer                        (12)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	print          { TK _ PRINT }
	';'            { TK _ SEP }
	integer        { TK _ (INT $$) }
	'+'            { TK _ PLUS }
	'-'            { TK _ SUB }
	'*'            { TK _ MULT }
	'/'            { TK _ DIV }
	'='            { TK _ EQ }
	let            { TK _ LET }
	var            { TK _ VAR }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Program         rule  1
	Linst           rules 2, 3
	Inst            rules 4, 5
	Print           rule  6
	Expr            rules 7, 8, 9, 10, 11
	Decl            rule  12

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parse -> . Program                           (rule 0)

	print          shift, and enter state 5
	';'            shift, and enter state 6

	Program        goto state 7
	Linst          goto state 2
	Inst           goto state 3
	Print          goto state 4

State 1

	Program -> . Linst                                  (rule 1)

	print          shift, and enter state 5
	';'            shift, and enter state 6

	Linst          goto state 2
	Inst           goto state 3
	Print          goto state 4

State 2

	Program -> Linst .                                  (rule 1)
	Linst -> Linst . Inst                               (rule 3)

	print          shift, and enter state 5
	';'            shift, and enter state 6
	%eof           reduce using rule 1

	Inst           goto state 11
	Print          goto state 4

State 3

	Linst -> Inst .                                     (rule 2)

	print          reduce using rule 2
	';'            reduce using rule 2
	%eof           reduce using rule 2


State 4

	Inst -> Print . ';'                                 (rule 4)

	';'            shift, and enter state 10


State 5

	Print -> print . Expr                               (rule 6)

	integer        shift, and enter state 9

	Expr           goto state 8

State 6

	Inst -> ';' .                                       (rule 5)

	print          reduce using rule 5
	';'            reduce using rule 5
	%eof           reduce using rule 5


State 7

	%start_parse -> Program .                           (rule 0)

	%eof           accept


State 8

	Print -> print Expr .                               (rule 6)
	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)

	';'            reduce using rule 6
	'+'            shift, and enter state 12
	'-'            shift, and enter state 13
	'*'            shift, and enter state 14
	'/'            shift, and enter state 15


State 9

	Expr -> integer .                                   (rule 7)

	';'            reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	'/'            reduce using rule 7


State 10

	Inst -> Print ';' .                                 (rule 4)

	print          reduce using rule 4
	';'            reduce using rule 4
	%eof           reduce using rule 4


State 11

	Linst -> Linst Inst .                               (rule 3)

	print          reduce using rule 3
	';'            reduce using rule 3
	%eof           reduce using rule 3


State 12

	Expr -> Expr '+' . Expr                             (rule 8)

	integer        shift, and enter state 9

	Expr           goto state 19

State 13

	Expr -> Expr '-' . Expr                             (rule 9)

	integer        shift, and enter state 9

	Expr           goto state 18

State 14

	Expr -> Expr '*' . Expr                             (rule 10)

	integer        shift, and enter state 9

	Expr           goto state 17

State 15

	Expr -> Expr '/' . Expr                             (rule 11)

	integer        shift, and enter state 9

	Expr           goto state 16

State 16

	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr '/' Expr .                             (rule 11)

	';'            reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            shift, and enter state 14
	'/'            reduce using rule 11


State 17

	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr '*' Expr .                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)

	';'            reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            reduce using rule 10
	'/'            reduce using rule 10


State 18

	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr '-' Expr .                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)

	';'            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            shift, and enter state 14
	'/'            shift, and enter state 15


State 19

	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr '+' Expr .                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)

	';'            reduce using rule 8
	'+'            reduce using rule 8
	'-'            shift, and enter state 13
	'*'            shift, and enter state 14
	'/'            shift, and enter state 15


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 13
Number of terminals: 10
Number of non-terminals: 7
Number of states: 20
